webpackJsonp([3,8],{845:function(n,d,e){"use strict";var t=e(0),o=e(17),i=e(857),c=e(851),a=e(286),r=e(485);e.d(d,"GitModule",function(){return l});var s=this&&this.__decorate||function(n,d,e,t){var o,i=arguments.length,c=i<3?d:null===t?t=Object.getOwnPropertyDescriptor(d,e):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(n,d,e,t);else for(var a=n.length-1;a>=0;a--)(o=n[a])&&(c=(i<3?o(c):i>3?o(d,e,c):o(d,e))||c);return i>3&&c&&Object.defineProperty(d,e,c),c},g=this&&this.__metadata||function(n,d){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,d)},l=function(){function n(){}return n=s([e.i(t.v)({imports:[o.b,i.a,r.a,a.MaterialModule.forRoot()],declarations:[c.a]}),g("design:paramtypes",[])],n)}()},851:function(n,d,e){"use strict";var t=e(0),o=e(44);e.d(d,"a",function(){return a});var i=this&&this.__decorate||function(n,d,e,t){var o,i=arguments.length,c=i<3?d:null===t?t=Object.getOwnPropertyDescriptor(d,e):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(n,d,e,t);else for(var a=n.length-1;a>=0;a--)(o=n[a])&&(c=(i<3?o(c):i>3?o(d,e,c):o(d,e))||c);return i>3&&c&&Object.defineProperty(d,e,c),c},c=this&&this.__metadata||function(n,d){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,d)},a=function(){function n(n){this.titleService=n,this.titleService.setTitle("Git")}return n.prototype.ngOnInit=function(){},n=i([e.i(t.P)({selector:"app-git",template:e(870),styles:[e(864)]}),c("design:paramtypes",["function"==typeof(d="undefined"!=typeof o.a&&o.a)&&d||Object])],n);var d}()},857:function(n,d,e){"use strict";var t=e(851),o=e(285);e.d(d,"a",function(){return c});var i=[{path:"",component:t.a}],c=o.a.forChild(i)},864:function(n,d){n.exports=".box{margin-left:auto;margin-right:auto;width:80%}.sub-heading{font-size:18px;color:#333}.codebg{background-color:#f7f7f7;margin:0;padding:18px;font-size:14px}.wordbg{background-color:#f7f7f7;padding:8px}code{font-size:16px}\n"},870:function(n,d){n.exports='<div class="box">\n  \n  <md-card>\n    <md-card-title>Git Commands</md-card-title>   \n    <md-card-content>\n          <p>Set of commands with short and sweet way. To keep handy.</p>\n    </md-card-content>\n  </md-card>\n  <!-- Start Google Adsense -->\n   <md-card>\n      <md-card-content>\n          <app-gadsense></app-gadsense>\n      </md-card-content>\n  </md-card>\n  <!-- End Google Adsense -->\n  <md-card>\n      <md-card-content>\n            <p class="sub-heading"><strong>Set your identity for first time user. So it show your name and details when you commit. </strong></p>\n            <div class="codebg">\n              <div>\n                <code>\n                  git config --global user.name "Your Name"\n                </code>\n              </div>\n              <div>\n                <code>\n                  git config --global user.email abcdefs@example.com\n                </code>\n              </div>\n            </div>\n      </md-card-content>\n  </md-card>\n\n  <md-card>\n      <md-card-content>\n            <p class="sub-heading"><strong>To clone particular branch of git</strong></p>\n            <div class="codebg">\n              <div>\n                <code>\n                 git clone -b &lt;branch_name&gt; &lt;remote_repo&gt;(git@github.com:prashantkoshta/angularjs-dashboard.git)\n                </code>\n              </div>\n            </div>\n      </md-card-content>\n  </md-card>\n\n  <md-card>\n      <md-card-content>\n            <p class="sub-heading">\n              <strong>\n                To checkout particular branch\n              </strong>\n            </p>\n            <div class="codebg">\n              <div>\n                <code>\n                  git checkout &lt;branch_name&gt;\n                </code>\n              </div>\n            </div>\n      </md-card-content>\n  </md-card>\n\n<md-card>\n      <md-card-content>\n            <p class="sub-heading">\n              <strong>\n                    To create new branch form existing branch.\n              </strong>\n            </p>\n            <ul>\n              <li>\n                Checkout branch from which you want to create new branch. Like i checkout master and from master i am createing new branch <span class="wordbg">dev_0.1</span>\n              </li>\n            </ul>\n            <div class="codebg">\n              <div>\n                <code>\n                  git checkout &lt;exiting_branch_name&gt;\n                </code>\n              </div>\n              <div>\n                <code>\n                  git checkout -b &lt;new_branch_name&gt;\n                </code>\n              </div>\n              <div>\n                <code>\n                  git push &lt;remote-name&gt; &lt;branch_name&gt;\n                </code>\n              </div>\n              </div>\n              <p>\n                Where <span class="wordbg">&lt;remote-name&gt;</span> is typically origin, the name which git gives to the remote you cloned from. Example:\n              </p>\n\n              <div class="codebg">\n              <div>\n                <code>\n                  git checkout master\n                </code>\n              </div>\n              <div>\n                <code>\n                  git checkout -b dev_0.1\n                </code>\n              </div>\n              <div>\n                <code>\n                  git push origin dev_0.1\n                </code>\n              </div>\n              </div>\n      </md-card-content>\n  </md-card>\n\n\n  <md-card>\n      <md-card-content>\n            <p class="sub-heading">\n              <strong>\n                To commit changes on git\n              </strong>\n            </p>\n            <ul>\n              <li>\n                check git status\n              </li>\n            </ul>\n            <div class="codebg">\n              <div>\n                <code>\n                  git status\n                </code>\n              </div>\n            </div>\n\n            <ul>\n              <li>\n                add modifed files. <span class="wordbg">.</span> show add all modified files. If you need to add specific file give file name instead of <span class="wordbg">.</span>.\n              </li>\n            </ul>\n            <div class="codebg">\n              <div>\n                <code>\n                  git add .\n                </code>\n              </div>\n            </div>\n\n            <ul>\n              <li>\n               Check file status\n              </li>\n            </ul>\n            <div class="codebg">\n              <div>\n                <code>\n                  git status\n                </code>\n              </div>\n            </div>\n\n            <ul>\n              <li>\n                Commit changes\n              </li>\n            </ul>\n            <div class="codebg">\n              <div>\n                <code>\n                  git commit -m "&lt;YOUR_COMMENTS_ON_COMMIT&gt;"\n                </code>\n              </div>\n            </div>\n\n            <ul>\n              <li>\n                Push changes\n              </li>\n            </ul>\n            <div class="codebg">\n              <div>\n                <code>\n                  git push\n                </code>\n              </div>\n            </div>\n      </md-card-content>\n  </md-card>\n\n\n\n  <md-card>\n      <md-card-content>\n            <p class="sub-heading">\n              <strong>\n                To pull changes into local from remote branch.\n              </strong>\n            </p>\n            <div class="codebg">\n              <div>\n                <code>\n                  git pull\n                </code>\n              </div>\n            </div>\n      </md-card-content>\n  </md-card>\n\n\n<md-card>\n      <md-card-content>\n            <p class="sub-heading">\n              <strong>\n                Set Beyond Compare as difftool for git.\n              </strong>\n            </p>\n            <div class="codebg">\n              <div>\n                <code>\n                  git config --global diff.tool bc3\n                </code>\n              </div>\n              <div>\n                <code>\n                  git config --global difftool.bc3.path "C:/Program Files (x86)/Beyond Compare 3/BCompare.exe"\n                </code>\n              </div>\n            </div>\n      </md-card-content>\n  </md-card>\n\n  <md-card>\n      <md-card-content>\n            <p class="sub-heading">\n              <strong>\n                Show last log. -4 show last 4 logs.\n              </strong>\n            </p>\n            <div class="codebg">\n              <div>\n                <code>\n                  git log -4\n                </code>\n              </div>\n            </div>\n      </md-card-content>\n  </md-card>\n\n\n<md-card>\n      <md-card-content>\n            <p class="sub-heading">\n              <strong>\n                To check file difference by BC tool.\n              </strong>\n            </p>\n            <div class="codebg">\n              <div>\n                <code>\n                  git difftool\n                </code>\n              </div>\n            </div>\n      </md-card-content>\n  </md-card>\n\n\n  <md-card>\n      <md-card-content>\n            <p class="sub-heading">\n              <strong>\n                To check difference between local version with remote version.\n              </strong>\n            </p>\n            <div class="codebg">\n              <div>\n                <code>\n                  git fetch origin\n                </code>\n              </div>\n              <div>\n                <code>\n                  git diff &lt;branch_name&gt; origin/&lt;branch_name&gt;\n                </code>\n              </div>\n            </div>\n            <p>\n              If difftool already set then\n            </p>\n            <div class="codebg">\n              <div>\n                <code>\n                  git fetch origin\n                </code>\n              </div>\n              <div>\n                <code>\n                  git difftool &lt;branch_name&gt; origin/&lt;branch_name&gt;\n                </code>\n              </div>\n            </div>\n      </md-card-content>\n  </md-card>\n\n\n<md-card>\n      <md-card-content>\n            <p class="sub-heading">\n              <strong>\n                To clean untracked git file\n              </strong>\n            </p>\n            <div class="codebg">\n              <div>\n                <code>\n                  git clean -df\n                </code>\n              </div>\n            </div>\n      </md-card-content>\n  </md-card>\n\n\n  <md-card>\n      <md-card-content>\n            <p class="sub-heading">\n              <strong>\n                To reset local version with remote branch (revert local changes)\n              </strong>\n            </p>\n            <div class="codebg">\n              <div>\n                <code>\n                  git reset --hard HEAD\n                </code>\n              </div>\n            </div>\n      </md-card-content>\n  </md-card>\n\n  <md-card>\n      <md-card-content>\n            <p class="sub-heading">\n              <strong>\n                Show list of file changed form last commit. If you like to see previos 2 then use <span class="wordbg">HEAD~2</span>.\n              </strong>\n            </p>\n            <div class="codebg">\n              <div>\n                <code>\n                  git diff --name-only HEAD HEAD~1\n                </code>\n              </div>\n            </div>\n      </md-card-content>\n  </md-card>\n\n  <md-card>\n      <md-card-content>\n            <p class="sub-heading">\n              <strong>\n                Merging branch and solving conflicts\n              </strong>\n            </p>\n            <p>\n              Assuming you have 2 branch master and dev_0.1. dev_0.1 is 2 commit behind the master. Now we have to merge master changes into dev_0.1. So my dev_0.1 will includ all master recent changes.\n            </p>\n            <div class="codebg">\n              <div>\n                <code>\n                  git checkout &gt;branch_name&lt; Like dev_0.1\n                </code>\n              </div>\n              <div>\n                <code>\n                  git merge &lt;remote_name&gt;/&lt;branch_name&gt; Like git merge orgin/master\n                </code>\n              </div>\n            </div>\n            <ul>\n              <li>\n                  It may show confilit or auto merge changes.\n              </li>\n              <li>\n                  If it show confilit then your branch bash path show like <span class="wordbg">(dev_0.1|MERGING)</span>. In this case we have confilict on code. It dispaly like this in confilict files.\n              </li>\n            </ul>\n\n\n            <div class="codebg">\n              <div>\n                <code>\n                  <<<<<<< HEAD\n                </code>\n              </div>\n             <div>\n                <code>\n                  res.send("Hello world now");\n                </code>\n              </div>\n              <div>\n                <code>\n                  =======\n                </code>\n              </div>\n              <div>\n                <code>\n                 res.send("Hello World Master Change");\n                </code>\n              </div>\n              <div>\n                <code>\n                 >>>>>>> origin/master\n                </code>\n              </div>\n            </div>\n\n            <ul>\n              <li>\n                Next step remove confilict from files and chek file status and commit then push.\n              </li>\n            </ul>\n\n            <div class="codebg">\n              <div>\n                <code>\n                  git status\n                </code>\n              </div>\n              <div>\n                <code>\n                  git commit -m "&lt;YOUR_COMMENTS_ON_COMMIT&gt;"\n                </code>\n              </div>\n              <div>\n                <code>\n                  git push\n                </code>\n              </div>\n            </div>\n\n      </md-card-content>\n  </md-card>\n\n\n<md-card>\n      <md-card-content>\n            <p class="sub-heading">\n              <strong>\n                To see the current configured remote repository for your fork.\n              </strong>\n            </p>\n            <div class="codebg">\n              <div>\n                <code>\n                  git remote -v\n                </code>\n              </div>\n              <div>\n                <code>\n                  origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)\n                </code>\n              </div>\n              <div>\n                <code>\n                  origin  https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)\n                </code>\n              </div>\n            </div>\n      </md-card-content>\n  </md-card>\n\n  <md-card>\n      <md-card-content>\n            <p class="sub-heading">\n              <strong>\n                To add upstream in your fork to push changes into main respositroy from your fork repository.\n              </strong>\n            </p>\n            <div class="codebg">\n              <div>\n                <code>\n                  git remote add upstream https://github.com/octocat/Spoon-Knife.git\n                </code>\n              </div>\n            </div>\n            <p> </p>\n            <div class="codebg">\n              <div>\n                <code>\n                  git remote -v\n                </code>\n              </div>\n\n              <div>\n                <code>\n                  origin https://github.com/YOUR_USERNAME/YOUR_FORK.git (fetch)\n                </code>\n              </div>\n              <div>\n                <code>\n                  origin https://github.com/YOUR_USERNAME/YOUR_FORK.git (push)\n                </code>\n              </div>\n              <div>\n                <code>\n                    upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (fetch)\n                </code>\n              </div>\n              <div>\n                <code>\n                  upstream  https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git (push)\n                </code>\n              </div>\n\n            </div>\n      </md-card-content>\n  </md-card>\n\n\n<md-card>\n      <md-card-content>\n            <p class="sub-heading">\n              <strong>\n                To Delete git branch from local/remote\n              </strong>\n            </p>\n            <ul>\n              <li>\n                Moveout from brach which you like to delete, checkout any other branch. Example: I like to delete dev_0.1 branch. So i checkout master branch\n              </li>\n            </ul>\n            <div class="codebg">\n              <div>\n                <code>\n                  git branch\n                </code>\n              </div>\n              <div>\n                <code>\n                  git checkout &lt;branch_name&gt;\n                </code>\n              </div>\n              <div>\n                <code>\n                  git branch -d &lt;delete_branch_name&gt; //Use -D instead to force deletion without checking merged status\n                </code>\n              </div>\n              <div>\n                <code>\n                  git branch\n                </code>\n              </div>\n              <div>\n                <code>\n                  git push origin --delete &lt;delete_branch_name&gt; // This will push changes in remote branch.\n                </code>\n              </div>\n            </div>\n\n            <p>\n            Like:\n          <p>\n\n            <div class="codebg">\n              <div>\n                <code>\n                  git checkout master\n                </code>\n              </div>\n              <div>\n                <code>\n                  git branch -d dev_0.1\n                </code>\n              </div>\n              <div>\n                <code>\n                  git push origin --delete dev_0.1\n                </code>\n              </div>\n            </div>\n\n      </md-card-content>\n  </md-card>\n\n  \n<md-card>\n      <md-card-content>\n            <p class="sub-heading">\n              <strong>\n                stash your local chagnes\n              </strong>\n            </p>\n            <p>\n              Use this if you like to save your local changes but dont want to commit until its not completed and do some work on other branch.\n            </p>\n            <div class="codebg">\n              <div>\n                <code>\n                  git stash list // show list of stash code.\n                </code>\n              </div>\n              <div>\n                <code>\n                  git stash // Create stash\n                </code>\n              </div>\n              <div>\n                <code>\n                  git stash pop //Pop your stash code\n                </code>\n              </div>\n            </div>\n            <p>\n              Example:\n            </p>\n            <div class="codebg">\n              <div>\n                <code>\n                  git checkout dev_0.1\n                </code>\n              </div>\n              <div>\n                <code>\n                  .... Made some changes on code.\n                </code>\n              </div>\n              <div>\n                <code>\n                  git stash\n                </code>\n              </div>\n              <div>\n                <code>\n                  git checkout master\n                </code>\n              </div>\n              <div>\n                <code>\n                  git checkout dev_0.1\n                </code>\n              </div>\n              <div>\n                <code>\n                  git stash pop \n                </code>\n              </div>\n              <div>\n                <code>\n                  // Pop all local changes on which i kept save in stash but not commited and continue my work from there.\n                </code>\n              </div>\n            </div>\n      </md-card-content>\n  </md-card>\n\n  <md-card>\n      <md-card-content>\n            <p class="sub-heading">\n              <strong>\n                Set env variable in window by git bash\n              </strong>\n            </p>\n            <div class="codebg">\n              <div>\n                <code>\n                  export JAVA_HOME="/C/Program Files/Java/jdk1.7.0_79"\n                </code>\n              </div>\n              <div>\n                <code>\n                  echo $JAVA_HOME\n                </code>\n              </div>\n            </div>\n      </md-card-content>\n  </md-card>\n\n  <md-card>\n      <md-card-content>\n            <p class="sub-heading">\n              <strong>\n                Set environment variable in git base\n              </strong>\n            </p>\n            <ul>\n              <li>\n                  Go to git bash home directory. It is genrally C:\\Users\\user_name\n              </li>\n            </ul>\n            <div class="codebg">\n              <div>\n                <code>\n                  touch .bashrc\n                </code>\n              </div>\n            </div>\n            <ul>\n              <li>\n                  Edit <span class="wordbg">.bashrc</span> with required env variables\n              </li>\n            </ul>\n            <div class="codebg">\n              <div>\n                <code>\n                  export JAVA_HOME="/C/Program Files/Java/jdk1.7.0_79"\n                </code>\n              </div>\n              <div>\n                <code>\n                  export GRADLE_HOME="/C/Users/gradle-2.10"\n                </code>\n              </div>\n              <div>\n                <code>\n                  export ANDROID_HOME="/C/Users/android-sdk-windows"\n                </code>\n              </div>\n              <div>\n                <code>\n                  export MAVEN_LOCAL_DIR=$ANDROID_HOME/extras/android/m2repository\n                </code>\n              </div>\n              <div>\n                <code>\n                  export PATH=$PATH:$JAVA_HOME/bin:$GRADLE_HOME/bin:$ANDROID_HOME/tools:$ANDROID_HOME/platforms\n                </code>\n              </div>\n              \n            </div>\n      </md-card-content>\n  </md-card>\n\n  <md-card>\n      <md-card-content>\n            <p class="sub-heading">\n              <strong>\n                Working with fork and upstream\n              </strong>\n            </p>\n            <ul>\n              <li>\n                Check upstream branch\n              </li>\n            </ul>\n            <div class="codebg">\n              <div>\n                <code>\n                  git remote -v\n                </code>\n              </div>\n            </div>\n            <ul>\n              <li>\n                Add upstream branch into fork\n              </li>\n            </ul>\n            <div class="codebg">\n              <div>\n                <code>\n                  git remote add upstream https://github.com/test/test-demo.git\n                </code>\n              </div>\n            </div>\n            <ul>\n              <li>\n                Get upstream branh into fork, which is not present in fork.\n              </li>\n            </ul>\n            <div class="codebg">\n              <div>\n                <code>\n                  git fetch upstream\n                </code>\n              </div>\n              <div>\n                <code>\n                  git checkout &lt;UPSTREAM_BRANCH_NAME&gt;\n                </code>\n              </div>\n              <div>\n                <code>\n                  git push origin <&lt;PSTREAM_BRANCH_NAME&gt; // It will add branch in fork repository\n                </code>\n              </div>\n            </div> \n            <ul>\n              <li>\n                Reset local changes in fork repository branch with upstream branch\n              </li>\n            </ul>\n            <div class="codebg">\n              <div>\n                <code>\n                  git reset --hard upstream/&lt;BRANCH_NAME&gt;\n                </code>\n              </div>\n            </div>\n            <ul>\n              <li>\n                pull changes from upstream branch to fork repo branch\n              </li>\n            </ul>\n            <div class="codebg">\n              <div>\n                <code>\n                  git pull upstram &lt;branch_name&gt;  // Fix confilicts if you get any.\n                </code>\n              </div>\n              <div>\n                <code>\n                  git add .\n                </code>\n              </div>\n              <div>\n                <code>\n                  git commit -m "&lt;COMMENTS&gt;"\n                </code>\n              </div>\n              <div>\n                <code>\n                  git push origin &lt;BRANCH_NAME&gt;\n                </code>\n              </div>\n            </div>\n              <ul>\n              <li>\n                To merge upstream changes into fork branch / syncing a fork\n\n              </li>\n            </ul>\n            <div class="codebg">\n              <div>\n                <code>\n                  git fetch upstream\n                </code>\n              </div>\n              <div>\n                <code>\n                  git diff upstream/&lt;BRANCH_NAME&gt; origin/&lt;BRANCH_NAME&gt;\n                </code>\n              </div>\n              <div>\n                <code>\n                  git merge upstream/&lt;BRANCH_NAME&gt;  // Fix confilicts if you get any.\n                </code>\n              </div>\n              <div>\n                <code>\n                  git status\n                </code>\n              </div>\n              <div>\n                <code>\n                  git add .\n                </code>\n              </div>\n              <div>\n                <code>\n                  git status\n                </code>\n              </div>\n              <div>\n                <code>\n                  git commit -m "&lt;COMMENTS&gt;"\n                </code>\n              </div>\n              <div>\n                <code>\n                  git push origin &lt;BRANCH_NAME&gt;\n                </code>\n              </div>\n            </div>\n            <ul>\n              <li>\n                To abort rebase skip or continue\n              </li>\n            </ul>\n            <div class="codebg">\n              <div>\n                <code>\n                  git rebase --continue\n                </code>\n              </div>\n              <div>\n                <code>\n                  git rebase --skip\n                </code>\n              </div>\n              <div>\n                <code>\n                  git rebase --abort // it move to dev_0.1 from (dev_0.1|REBASE 2/3) \n                </code>\n              </div>\n            </div>\n\n      </md-card-content>\n  </md-card>\n\n  <md-card>\n      <md-card-content>\n            <p class="sub-heading">\n              <strong>\n                Revert changes in git branch\n              </strong>\n            </p>\n            <div class="codebg">\n              <div>\n                <code>\n                  git log\n                </code>\n              </div>\n              <div>\n                <code>\n                  git revert --no-commit 5fde377..HEAD // 5fde377 commit number\n                </code>\n              </div>\n              <div>\n                <code>\n                  git commit -m "Revert changes"\n                </code>\n              </div>\n              <div>\n                <code>\n                  git push\n                </code>\n              </div>\n              \n            </div>\n      </md-card-content>\n  </md-card>\n\n\n</div>\n'}});
//# sourceMappingURL=3.cee93e9caa5d89f6c3c2.bundle.map